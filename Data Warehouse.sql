use sakila;

CREATE VIEW customer_rental_dw AS
SELECT 
    -- Customer Information
    c.customer_id,  -- Unique identifier for each customer
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,  -- Full customer name
    c.email AS customer_email,  -- Customer email for marketing/communication
    CASE 
        WHEN c.active = 1 THEN 'Active' 
        ELSE 'Inactive' 
    END AS customer_status,  -- Identifies whether the customer is currently active

    -- ðŸ“Œ Customer Rental Behavior & Revenue Analysis
    COUNT(r.rental_id) AS total_rentals,  -- Total number of rentals by the customer
    SUM(p.amount) AS total_revenue,  -- Total revenue generated by the customer
    COUNT(DISTINCT DATE(r.rental_date)) AS active_rental_days,  -- Number of unique days the customer rented movies

    -- ðŸ“Œ Movie Performance Analysis
    COUNT(DISTINCT f.film_id) AS unique_films_rented,  -- Unique movies rented by the customer
    SUM(p.amount) AS film_revenue,  -- Total revenue generated from movies rented by the customer

    -- ðŸ“Œ Store Performance Metrics
    s.store_id,  -- Store where the rental took place
    COUNT(r.rental_id) AS total_rentals_per_store,  -- Total rentals at the store
    SUM(p.amount) AS total_store_revenue,  -- Total revenue earned by the store

    -- ðŸ“Œ Seasonal & Business Trends
    DATE_FORMAT(r.rental_date, '%Y-%m') AS rental_month,  -- Extracts the rental year and month
    COUNT(DISTINCT r.rental_id) AS monthly_rentals,  -- Total unique rentals per month
    SUM(p.amount) AS monthly_revenue  -- Total revenue earned per month

FROM rental r
-- ðŸŽ¯ Joining Customer Information
JOIN customer c ON r.customer_id = c.customer_id  

-- ðŸŽ¯ Linking Rentals to Inventory & Films
JOIN inventory i ON r.inventory_id = i.inventory_id  
JOIN film f ON i.film_id = f.film_id  

-- ðŸŽ¯ Connecting Films to Categories
JOIN film_category fc ON f.film_id = fc.film_id  
JOIN category cat ON fc.category_id = cat.category_id  

-- ðŸŽ¯ Associating Rentals with Store Locations
JOIN store s ON i.store_id = s.store_id  

-- ðŸŽ¯ Linking Payments (Left Join to Include Rentals Without Payments)
LEFT JOIN payment p ON r.rental_id = p.rental_id  

-- âœ… FIX: Ensure Proper Grouping for Aggregations
GROUP BY 
    c.customer_id, c.first_name, c.last_name, c.email, c.active,  -- Grouping by unique customers
    s.store_id, DATE_FORMAT(r.rental_date, '%Y-%m');  -- Grouping by store and rental month



select * from customer_rental_dw
limit 25;